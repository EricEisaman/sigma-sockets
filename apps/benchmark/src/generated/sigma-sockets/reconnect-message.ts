// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ReconnectMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReconnectMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReconnectMessage(bb:flatbuffers.ByteBuffer, obj?:ReconnectMessage):ReconnectMessage {
  return (obj || new ReconnectMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReconnectMessage(bb:flatbuffers.ByteBuffer, obj?:ReconnectMessage):ReconnectMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReconnectMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():string|null
sessionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sessionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lastMessageId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startReconnectMessage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sessionIdOffset, 0);
}

static addLastMessageId(builder:flatbuffers.Builder, lastMessageId:bigint) {
  builder.addFieldInt64(1, lastMessageId, BigInt('0'));
}

static endReconnectMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReconnectMessage(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset, lastMessageId:bigint):flatbuffers.Offset {
  ReconnectMessage.startReconnectMessage(builder);
  ReconnectMessage.addSessionId(builder, sessionIdOffset);
  ReconnectMessage.addLastMessageId(builder, lastMessageId);
  return ReconnectMessage.endReconnectMessage(builder);
}
}
