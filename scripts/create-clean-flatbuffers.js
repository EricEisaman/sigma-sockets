#!/usr/bin/env node

/**
 * Create Clean FlatBuffers Files
 * 
 * This script creates clean, minimal FlatBuffers TypeScript files
 * without the problematic generated code that causes TypeScript errors.
 */

import { writeFileSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Get the package directory from command line argument or current working directory
const packageDir = process.argv[2] || process.cwd();
const targetDir = join(packageDir, 'src', 'generated', 'sigma-sockets');

console.log(`ğŸ”„ Creating clean FlatBuffers files for package: ${packageDir.split('/').pop()}`);

// Ensure target directory exists
mkdirSync(targetDir, { recursive: true });

// Create clean message-type.ts
const messageTypeContent = `// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

export enum MessageType {
  Connect = 0,
  Disconnect = 1,
  Data = 2,
  Heartbeat = 3,
  Reconnect = 4,
  Error = 5
}
`;

// Create clean message-data.ts
const messageDataContent = `// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

export enum MessageData {
  NONE = 0,
  ConnectMessage = 1,
  DisconnectMessage = 2,
  DataMessage = 3,
  HeartbeatMessage = 4,
  ReconnectMessage = 5,
  ErrorMessage = 6
}
`;

// Create clean message.ts
const messageContent = `// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MessageData } from './message-data.js';
import { MessageType } from './message-type.js';


export class Message {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():MessageType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MessageType.Connect;
}

dataType():MessageData {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MessageData.NONE;
}

data(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:MessageType) {
  builder.addFieldInt8(0, type, MessageType.Connect);
}

static addDataType(builder:flatbuffers.Builder, dataType:MessageData) {
  builder.addFieldInt8(1, dataType, MessageData.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataOffset, 0);
}

static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createMessage(builder:flatbuffers.Builder, type:MessageType, dataType:MessageData, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  Message.startMessage(builder);
  Message.addType(builder, type);
  Message.addDataType(builder, dataType);
  Message.addData(builder, dataOffset);
  return Message.endMessage(builder);
}
}
`;

// Create clean data-message.ts
const dataMessageContent = `// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DataMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataMessage(bb:flatbuffers.ByteBuffer, obj?:DataMessage):DataMessage {
  return (obj || new DataMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataMessage(bb:flatbuffers.ByteBuffer, obj?:DataMessage):DataMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

payload(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

payloadLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

payloadArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

messageId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startDataMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPayload(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, payloadOffset, 0);
}

static createPayloadVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPayloadVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addMessageId(builder:flatbuffers.Builder, messageId:bigint) {
  builder.addFieldInt64(1, messageId, BigInt('0'));
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(2, timestamp, BigInt('0'));
}

static endDataMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDataMessage(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset, messageId:bigint, timestamp:bigint):flatbuffers.Offset {
  DataMessage.startDataMessage(builder);
  DataMessage.addPayload(builder, payloadOffset);
  DataMessage.addMessageId(builder, messageId);
  DataMessage.addTimestamp(builder, timestamp);
  return DataMessage.endDataMessage(builder);
}
}
`;

// Write all files
writeFileSync(join(targetDir, 'message-type.ts'), messageTypeContent);
writeFileSync(join(targetDir, 'message-data.ts'), messageDataContent);
writeFileSync(join(targetDir, 'message.ts'), messageContent);
writeFileSync(join(targetDir, 'data-message.ts'), dataMessageContent);

console.log('âœ… Clean FlatBuffers files created successfully!');
