// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ConnectMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConnectMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConnectMessage(bb:flatbuffers.ByteBuffer, obj?:ConnectMessage):ConnectMessage {
  return (obj || new ConnectMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConnectMessage(bb:flatbuffers.ByteBuffer, obj?:ConnectMessage):ConnectMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConnectMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():string|null
sessionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sessionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

clientVersion():string|null
clientVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clientVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startConnectMessage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sessionIdOffset, 0);
}

static addClientVersion(builder:flatbuffers.Builder, clientVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, clientVersionOffset, 0);
}

static endConnectMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConnectMessage(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset, clientVersionOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConnectMessage.startConnectMessage(builder);
  ConnectMessage.addSessionId(builder, sessionIdOffset);
  ConnectMessage.addClientVersion(builder, clientVersionOffset);
  return ConnectMessage.endConnectMessage(builder);
}
}
